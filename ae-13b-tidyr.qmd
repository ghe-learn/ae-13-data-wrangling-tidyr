---
title: "Application Exercise 13 - Data wrangling with tidyr"
format: html
editor: source
editor_options: 
  chunk_output_type: console
bibliography: references.bib
execute:
  echo: true
  warning: false
  message: false
---

# Part 0: Load Packages

1. What's the `tidyverse` Package? Describe in maximum two sentences below.

```{r}
library(tidyverse)
```

# Part 1: Import data

**Write the code yourself**

1. Use the `read_csv()` function to import the 'msw-generation-and-composition-by-income.csv' and assign it to an object with a name of your choice.

```{r}

waste_data <- read_csv("data/raw_data/msw-generation-and-composition-by-income.csv")

```

# Part 2: Vector coersion

**Write the code yourself**

1. Starting with the data object you imported, use the pipe operator and the `mutate()` function to convert the `income_cat` variable from a variable of type character to a variable of type factor. Define the factor levels yourself and store them in a separate object with a name of your choice.

2. Assign the created dataframe to an object with a name of your choice.

3. Render and fix any errors

4. Commit your changes

```{r}

levels_income_cat <- c("high income", 
                       "upper-middle income",
                       "lower-middle income",
                       "low income")

waste_data_fct <- waste_data %>% 
  mutate(income_cat = factor(income_cat, levels = levels_income_cat))

```

# Part 3: From wide to long

**Write the code yourself**

1. Starting with the data object you created in Part 2, use the `pivot_longer()` function to convert the dataframe from a wide to a long format. Apply the following:

- bring all columns from `food_organic_waste` to `yard_garden_green_waste` into a long format
- send the variable names to a column named "waste_category"
- send the values of the variables to a column names "percent"

2. Remove all NAs from the `percent` variable

3. Assign the created dataframe to an object with a name of your choice.

4. Render and fix any errors

5. Commit your changes

```{r}

waste_data_long <- waste_data_fct %>% 
  pivot_longer(cols = food_organic_waste:yard_garden_green_waste,
               names_to = "waste_category",
               values_to = "percent") %>% 
  drop_na(percent)
```

# Part 4: Summarise data

As in the exercises for week 12, I have stored the data that I would have expected at this point and import it here. 

1. Use R functions in the code-chunk below to check whether you have come to the same result by identifying if the number of of columns and rows are equal between the object from Part 3 and the `waste_data_long` object you just imported.

```{r}

waste_data_long <- read_rds("data/intermediate_data/msw-generation-and-composition-by-income-long.rds")

# You can perform your checks in this code chunk

```

**Write the code yourself**

1. Starting with `waste_data_long`, group the data by`income_cat` and the waste category variable, then create a summary table containing the mean of percentages  (call this mean_percent) for each group.

2. Assign the created dataframe to an object with the name `waste_data_long_mean`.

```{r}

waste_data_long_mean <- waste_data_long %>% 
  group_by(income_cat, waste_category) %>% 
  summarise(mean_percent = mean(percent)) 

```

**Fill in the blanks**

1. Starting with the `waste_data_long_mean` object, execute the code and observe the output in the Console. Would you publish this table in a report in this format?

2. Starting with the `waste_data_long_mean` object, use the pipe operator to add another line of code which uses the `pivot_wider()` function to bring the data from a long format into a wide format using names for variables from `waste_category` and corresponding values from `mean_percent`

3. Execute the code and observe the output in the Console. Would you publish this table in a report in this format?

4. Render and fix any errors

5. Commit your changes

```{r}
#| eval: true

waste_data_long_mean

waste_data_long_mean %>% 
  pivot_wider(names_from = waste_category,
              values_from = mean_percent) 
  
```

# Part 5: Data visualisation

1. Render and fix any errors

2. Reproduce the plot that you see as an image below when you render the report and view the output in your Viewer tab in the bottom right window. 

**Hint:** To get those bars displayed next to each other, use the `geom_col()` function with the `position = position_dodge()` argument. The colors don't have to be exactly the same colours, just not the default color scale. As you know, I like my theming minimal. 

3. Commit your changes.

**Note::** You should have accumulated 4 commits by now. If this was an exam, then you would get your points for these 4 commits (not if you only did one commit).

4. Push all commits to your remote repository (GitHub) and open an issue on the repository to let us know you are done.

```{r}

ggplot(data = waste_data_long_mean, 
       mapping = aes(x = mean_percent, y = waste_category, fill = income_cat)) +
  geom_col(position = position_dodge()) +
  labs(title = "Waste Composition",
       subtitle = "Mean percentages of nine waste categories displayed by income categories",
       x = "mean (percent)",
       y = "waste category",
       fill = "Income category",
       caption = "Data from: https://datacatalog.worldbank.org/search/dataset/0039597") +
  scale_x_continuous(breaks = seq(0, 50, 5)) +
  scale_fill_brewer(type = "qual", palette = 3) +
  theme_minimal() +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major.y = element_blank())
  
```


![](figs/fig-01-mean-waste-composition-by-income.png)